/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { createHandlerBoundToURL, precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { NetworkFirst } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /[^/?]+\\.[^/]+$/;

registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }: { request: Request; url: URL }) => {
        // If this isn't a navigation, skip.
        if (request.mode !== "navigate") {
            return false;
        }

        // If this is a URL that starts with /_, skip.
        if (url.pathname.startsWith("/_")) {
            return false;
        }

        // If this looks like a URL for a resource, because it contains
        // a file extension, skip.
        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        }

        // Return true to signal that we want to use the handler.
        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html"),
);

// cache every url for offline mode
registerRoute(
    // Cache all url.
    ({ url }) => {
        if (!url.pathname.endsWith(".js")) {
            return false;
        }
    },
    // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new NetworkFirst({
        cacheName: "data",
    }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", event => {
    if (event.data && event.data.type === "SKIP_WAITING") {
        self.skipWaiting();
    }
});

// Any other custom service worker logic can go here.
self.addEventListener("install", function (event) {
    event.waitUntil(
        caches.open("v1").then(function (cache) {
            return cache.addAll([
                "index.html",
                "assets/illustration/who-are-you.svg",
                "assets/illustration/reviewer.svg",
                "assets/illustration/reminder-note.svg",
                "assets/illustration/kind-of-week.svg",
                "assets/illustration/activity.svg",
                "assets/illustration/day-of-survey.svg",
                "assets/illustration/disconnect.svg",
                "assets/illustration/empty-activity.svg",
                "assets/illustration/exceptional-day.svg",
                "assets/illustration/felicitations.svg",
                "assets/illustration/greatest-activity-day.svg",
                "assets/illustration/hourpicker.svg",
                "assets/illustration/info-alert.svg",
                "assets/illustration/info.svg",
                "assets/illustration/yellow-plus.svg",
                "assets/illustration/worst-activity-day.svg",
                "assets/illustration/submit.svg",
                "assets/illustration/route.svg",
            ]);
        }),
    );
});
