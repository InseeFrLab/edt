/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { createHandlerBoundToURL, precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import { NetworkFirst } from "workbox-strategies";

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = /[^/?]+\\.[^/]+$/;

registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }: { request: Request; url: URL }) => {
        // If this isn't a navigation, skip.
        if (request.mode !== "navigate") {
            return false;
        }

        // If this is a URL that starts with /_, skip.
        if (url.pathname.startsWith("/_")) {
            return false;
        }

        // If this looks like a URL for a resource, because it contains
        // a file extension, skip.
        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        }

        // Return true to signal that we want to use the handler.
        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html"),
);

// cache every url for offline mode
registerRoute(
    // Cache all url.
    ({ url }) => {
        if (!url.pathname.endsWith(".js")) {
            return false;
        }
    },
    // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new NetworkFirst({
        cacheName: "data",
    }),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", event => {
    if (event.data && event.data.type === "SKIP_WAITING") {
        self.skipWaiting();
    }
});

// Any other custom service worker logic can go here.

function matchInString(regExp: RegExp, string: string) {
    let m;
    while ((m = regExp.exec(string)) !== null) {
        if (m.index === regExp.lastIndex) regExp.lastIndex++;
        return m;
    }
    return null;
}

function SVGPromise(event: any) {
    // we create the Promise object that will get returned
    let promise = new Promise(function (resolve, reject) {
        // retrieve from cache the master svg file
        let r = new Request("assets/svg/svg-built.svg");
        caches
            .match(r)
            .then(function (response: any) {
                return response.text();
            })
            .then(function (svgMaster) {
                // master file was successfully retrieved from cache
                // svgMaster is the text content of the file
                // extract the name of the file from the request
                // i.e. http://www.domain.com/folder/assets/file.svg to file.svg
                let id = matchInString(RegExp("/.*/(.*)/gmi"), event?.request?.url || "")?.[1];

                // try to extract the svg tag with the id attribute with the name
                let regExp = new RegExp('(<svg id="' + id + '".*</svg>)', "gi");
                let res = matchInString(regExp, svgMaster);

                if (res) {
                    // we found it, we can return the node as am SVG file
                    // check what happens in SVGPromise.then
                    let code = res[0];
                    let svgResponse = new Response(code, {
                        headers: { "Content-Type": "image/svg+xml" },
                    });
                    resolve(svgResponse);
                } else {
                    // we didn't find it, the promise is rejected
                    // check what happens in the SVGPromise.catch
                    reject(id + " is not on master");
                }
            });
    });
    return promise;
}

//use of master svg file to avoid svg lazyloading and allow offline icons access
self.addEventListener("install", function (event: any) {
    event.waitUntil(
        caches.open("v1").then(function (cache) {
            return cache.addAll(["index.html", "assets/illustration/svg-built.svg"]);
        }),
    );
});

// to fetch svg from cached svg-built.svg file
self.addEventListener("fetch", function (event: any) {
    // the request URL is to a file with SVG extension
    if (/.svg$/.test(event.request.url)) {
        console.log("Trying to fetch an SVG: ", event.request.url);
        // we'll respond the fetch request with the fullfilment of the SVGPromise
        event.respondWith(
            SVGPromise(event)
                .then(function (r) {
                    // successfully retrieved the SVG file from master file in cache
                    return r;
                })
                .catch(function (e) {
                    // couldn't find the file in the master file
                    console.log("ERROR: ", e);
                    // fetch from server normally
                    return fetch(event.request.url);
                }),
        );
    }
});
